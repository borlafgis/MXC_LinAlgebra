# Vectors

```{python}
import numpy as np
import matplotlib.pyplot as plt
```


## Algebraic and geometric interpretations

Many concepts in linear algebra can be conceptualized using both algebra and
geometry. This is convenient because some concepts are more intuitive from one
of these two points of view.

A vector is an ordered list of numbers like this. Their representation generally
is surrounded by brackets (sometimes angled brackets, or parentheses). Vectors
contain several elements, numbers of any kind: integers or fractions,
real or complex, rational or irrational. 

$$
\begin{bmatrix}
1 \\ 2 \\ 3
\end{bmatrix}
\neq
\begin{bmatrix}
2 \\ 1 \\ 3
\end{bmatrix}
$${#eq-vec-order}

The number of elements in a vector is called the dimensionality of the vector.
In @eq-vec-order, both sides are three dimensional vectors. They are not the
same because the order of these elements is meaningful: the first element on
the left side is $1$, whereas on the right side it is $2$. @eq-vec-size shows
a 2- and 5-dimensional vectors.

$$
\begin{bmatrix}
3 \\ 4
\end{bmatrix}
\quad
\begin{bmatrix}
1 \\ 0 \\ \pi \\ 5i \\ -2
\end{bmatrix}
$${#eq-vec-size}

Vectors can be vertical, case where they are called column vectors, or
horizontal, case where they are called row vectors.

$$
\begin{bmatrix}
1 & 2 & 3 & 5 & 4 \\
\end{bmatrix}
$$

Nomenclature around vectors is a bit confusing because source it uses one of
many conventions. The most common way to refer to vectors is using a lowercase,
bold Latin letter, such as $\mathbf{v}$. Sometimes you'll see a little arrow on top of
the letter $\left( \vec{\mathbf{v}} \right)$, which is used to avoid ambiguity about
whether or not this is referring to a vector. Rarely you may encounter vectors
represented using italicized letters. Here we just use lowercase boldface
letters $\left( \mathbf{v} \right)$.

### Geometric interpretation

In geometric terms a vector represents a straight line with some length and
some direction, which is specified by the numbers contained in the vector.
The starting point of vector is called the tail of the vector, and its end is
called the head, symbolized by an arrowhead. 

Note a vector is defined just by its length and direction respective from the
start: it these could start from any point in space. In other words, vectors
are robust to translation Â¿or rigid body motion?. Thus, even though it may be
tempting to interpret the contents of a 2D vector as a coordinate, this only
holds if the tail of the vector is placed on the origin: the vector and the
coordinates are overlapping. If a vector starts at $(0, 0)$ they are considered
to be in standard position. Such position is convenient for many reasons (it
can be assumed if nothing has stated otherwise).

A vector can be 2-, 3-dimensional, etc. Even though past this point
visualization becomes challenging, the principle remains the same.
It also shows a common theme in linear algebra: the geometric interpretation
is useful up to 3 dimensions, point where is more intuitive to switch back
to algebra.

Note vectors can also contain functions.

$$
\begin{bmatrix}
\sin (x) \\
x \cos(x) \\
x \\
\end{bmatrix}
$${#eq-fun-vector}

@eq-fun-vector is a vector valued function where $x$ is some continuous vector.
However, in this course, I'm only going to be talking about vectors where each
element is a number, not an entire function.

### Python

We will be using Numpy, Matplotlib and their submodules (pyplot) for all the
lessons in this course. A list could be considered a 2D vector, but in most
cases is preferable to use a Numpy array, specially for complex cases.
Transpose swaps, the rows and the columns. This operation can be called as a
function, or as a method of Numpy arrays (`.T`).

When we use the function `plt.plot` we are just specifying the $x$ and the $y$
values to draw a line. The code indicates the line start at the origin
$(0, 0)$, and ends at the $x$, $y$ locations corresponding to the first and
second elements of the vector, respectively. So the $x$ coordinate is at $3$
and the $y$ coordinate is $-2$. The rest of the code sets the aspect of the
figure, adds the cartesian axis lines, the grid and sets the plot extent.

```{python}

# 2-dimensional vector
v2 = [ 3, -2 ]

# 3-dimensional vector
v3 = [ 4, -3, 2 ]

# row to column (or vice-versa):
v3t = np.transpose(v3)


# plot them
plt.plot([0,v2[0]],[0,v2[1]])
plt.axis('equal')
plt.plot([-4, 4],[0, 0],'k--')
plt.plot([0, 0],[-4, 4],'k--')
plt.grid()
plt.axis((-4, 4, -4, 4))
```

3D plotting in Python requires a few actual pieces of code compared to plotting
in 2D. In this case, `ax.plot` is a method of a figure panel (`ax` in
Matplotlib terminology) which has been been set to be projected in 3D.
The first argument are the $x$ coordinates, the second the $y$ coordinates,
ad the third the $z$ coordinates. The rest of the code is just setting the axis,
the extent, etc.

```{python}

# plot the 3D vector
fig = plt.figure(figsize=plt.figaspect(1))
# ax = fig.add_subplot(projection='3d')
ax = plt.axes(projection = '3d')
ax.plot([0, v3[0]],[0, v3[1]],[0, v3[2]],linewidth=3)

# make the plot look nicer
ax.plot([0, 0],[0, 0],[-4, 4],'k--')
ax.plot([0, 0],[-4, 4],[0, 0],'k--')
ax.plot([-4, 4],[0, 0],[0, 0],'k--')
plt.show()
```

### Summary

* Algebraic and the geometric interpretation of a vector
* The difference between a vector and a coordinate and the one case
* The special case where the vector and the coordinate overlap when the vector
*  is being drawn in its standard position.

---
## VIDEO: Vector addition/subtraction
---



```python

# two vectors in R2
v1 = np.array([ 3, -1 ])
v2 = np.array([ 2,  4 ])

v3 = v1 + v2


# plot them
plt.plot([0, v1[0]],[0, v1[1]],'b',label='v1')
plt.plot([0, v2[0]]+v1[0],[0, v2[1]]+v1[1],'r',label='v2')
plt.plot([0, v3[0]],[0, v3[1]],'k',label='v1+v2')

plt.legend()
plt.axis('square')
plt.axis((-6, 6, -6, 6, -6, 6 ))
plt.grid()
plt.show()

```


---
# VIDEO: Vector-scalar multiplication
---



```python
# vector and scalar
v1 = np.array([ 3, -1 ])
l  = 2.3
v1m = v1*l # scalar-modulated

# plot them
plt.plot([0, v1[0]],[0, v1[1]],'b',label='$v_1$')
plt.plot([0, v1m[0]],[0, v1m[1]],'r:',label='$\lambda v_1$')

plt.legend()
plt.axis('square')
axlim = max([max(abs(v1)),max(abs(v1m))])*1.5 # dynamic axis lim
plt.axis((-axlim,axlim,-axlim,axlim))
plt.grid()
plt.show()
```


---
# VIDEO: Vector-vector multiplication: the dot product
---



```python
## many ways to compute the dot product

v1 = np.array([ 1, 2, 3, 4, 5, 6 ])
v2 = np.array([ 0, -4,  -3, 6, 5 ])

# method 1
dp1 = sum( np.multiply(v1,v2) )

# method 2
dp2 = np.dot( v1,v2 )

# method 3
dp3 = np.matmul( v1,v2 )

# method 4
dp4 = 0  # initialize

# loop over elements
for i in range(len(v1)):

    # multiply corresponding element and sum
    dp4 = dp4 + v1[i]*v2[i]


print(dp1,dp2,dp3,dp4)
```

# VIDEO: Dot product properties: associative and distributive


```python
## Distributive property

# create random vectors
n = 10
a = np.random.randn(n)
b = np.random.randn(n)
c = np.random.randn(n)

# the two results
res1 = np.dot( a , (b+c) )
res2 = np.dot(a,b) + np.dot(a,c)

# compare them
print([ res1,res2 ])
```


```python
## Associative property

# create random vectors
n = 5
a = np.random.randn(n)
b = np.random.randn(n)
c = np.random.randn(n)

# the two results
res1 = np.dot( a , np.dot(b,c) )
res2 = np.dot( np.dot(a,b) , c )

# compare them
print(res1)
print(res2)


### special cases where associative property works!
# 1) one vector is the zeros vector
# 2) a==b==c

```


---
# VIDEO: Vector length
---



```python
# a vector
v1 = np.array([ 1, 2, 3, 4, 5, 6 ])

# methods 1-4, just like with the regular dot product, e.g.:
vl1 = np.sqrt( sum( np.multiply(v1,v1)) )

# method 5: take the norm
vl2 = np.linalg.norm(v1)

print(vl1,vl2)
```


---
# VIDEO: The dot product from a geometric perspective
---



```python

# two vectors
v1 = np.array([ 2,  4, -3 ])
v2 = np.array([ 0, -3, -3 ])

# compute the angle (radians) between two vectors
ang = np.arccos( np.dot(v1,v2) / (np.linalg.norm(v1)*np.linalg.norm(v2)) )


# draw them
fig = plt.figure()
# ax = fig.add_subplot(projection='3d')
ax = plt.axes(projection = '3d')
ax.plot([0, v1[0]],[0, v1[1]],[0, v1[2]],'b')
ax.plot([0, v2[0]],[0, v2[1]],[0, v2[2]],'r')

plt.axis((-6, 6, -6, 6))
plt.title('Angle between vectors: %s rad.' %ang)
plt.show()

```


```python
## equivalence of algebraic and geometric dot product formulas

# two vectors
v1 = np.array([ 2,  4, -3 ])
v2 = np.array([ 0, -3, -3 ])


# algebraic
dp_a = np.dot( v1,v2 )

# geometric
dp_g = np.linalg.norm(v1)*np.linalg.norm(v2)*np.cos(ang)

# print dot product to command
print(dp_a)
print(dp_g)

```


---
# VIDEO: Vector Hadamard multiplication
---



```python

# create vectors
w1 = [ 1, 3, 5 ]
w2 = [ 3, 4, 2 ]

w3 = np.multiply(w1,w2)
print(w3)

```


---
# VIDEO: Vector outer product
---



```python

v1 = np.array([  1, 2, 3 ])
v2 = np.array([ -1, 0, 1 ])

# outer product
np.outer(v1,v2)

# terrible programming, but helps conceptually:
op = np.zeros((len(v1),len(v2)))
for i in range(0,len(v1)):
    for j in range(0,len(v2)):
        op[i,j] = v1[i] * v2[j]

print(op)
```


---
# VIDEO: Vector cross product
---



```python
# create vectors
v1  = [ -3,  2, 5 ]
v2  = [  4, -3, 0 ]

# Python's cross-product function
v3a = np.cross( v1,v2 )

# "manual" method
v3b = [ [v1[1]*v2[2] - v1[2]*v2[1]],
        [v1[2]*v2[0] - v1[0]*v2[2]],
        [v1[0]*v2[1] - v1[1]*v2[0]] ]

print(v3a,v3b)


fig = plt.figure()
# ax = fig.add_subplot(projection='3d')
ax = plt.axes(projection = '3d')

# draw plane defined by span of v1 and v2
xx, yy = np.meshgrid(np.linspace(-10,10,10),np.linspace(-10,10,10))
z1 = (-v3a[0]*xx - v3a[1]*yy)/v3a[2]
ax.plot_surface(xx,yy,z1,alpha=.2)

## plot the two vectors
ax.plot([0, v1[0]],[0, v1[1]],[0, v1[2]],'k')
ax.plot([0, v2[0]],[0, v2[1]],[0, v2[2]],'k')
ax.plot([0, v3a[0]],[0, v3a[1]],[0, v3a[2]],'r')


ax.view_init(azim=150,elev=45)
plt.show()
```


---
# VIDEO: Hermitian transpose (a.k.a. conjugate transpose)
---



```python
# create a complex number
z = complex(3,4)

# magnitude
print( np.linalg.norm(z) )

# by transpose?
print( np.transpose(z)*z )

# by Hermitian transpose
print( np.transpose(z.conjugate())*z )


# complex vector
v = np.array( [ 3, 4j, 5+2j, complex(2,-5) ] )
print( v.T )
print( np.transpose(v) )
print( np.transpose(v.conjugate()) )
```

    5.0
    (-7+24j)
    (25+0j)
    [3.+0.j 0.+4.j 5.+2.j 2.-5.j]
    [3.+0.j 0.+4.j 5.+2.j 2.-5.j]
    [3.-0.j 0.-4.j 5.-2.j 2.+5.j]



---
# VIDEO: Unit vector
---



```python

# vector
v1 = np.array([ -3, 6 ])

# mu
mu = 1/np.linalg.norm(v1)

v1n = v1*mu

# plot them
plt.plot([0, v1n[0]],[0, v1n[1]],'r',label='v1-norm',linewidth=5)
plt.plot([0, v1[0]],[0, v1[1]],'b',label='v1')

# axis square
plt.axis('square')
plt.axis(( -6, 6, -6, 6 ))
plt.grid()
plt.legend()
plt.show()
```


---
# VIDEO: Span
---



```python
# set S
S1 = np.array([1, 1, 0])
S2 = np.array([1, 7, 0])

# vectors v and w
v = np.array([1, 2, 0])
w = np.array([3, 2, 1])

# draw vectors
fig = plt.figure()
# ax = fig.add_subplot(projection='3d')
ax = plt.axes(projection = '3d')
ax.plot([0, S1[0]],[0, S1[1]],[.1, S1[2]+.1],'r',linewidth=3)
ax.plot([0, S2[0]],[0, S2[1]],[.1, S2[2]+.1],'r',linewidth=3)

ax.plot([0, v[0]],[0, v[1]],[.1, v[2]+.1],'g',linewidth=3)
ax.plot([0, w[0]],[0, w[1]],[0, w[2]],'b')

# now draw plane
xx, yy = np.meshgrid(range(-15,16), range(-15,16))
cp = np.cross(S1,S2)
z1 = (-cp[0]*xx - cp[1]*yy)*1./cp[2]
ax.plot_surface(xx,yy,z1)

plt.show()
```
